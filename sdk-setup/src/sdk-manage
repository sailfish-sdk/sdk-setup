#!/bin/bash
#
# This is a helper script for the Mer SDK to manage sb2 target and
# toolchain installation

usage()
{
    cat <<EOF
    usage (keep the arguments order):
           $0 --toolchain --list
           $0 --toolchain --install <arch>
           $0 --toolchain --remove <arch>

           $0 --target --list
           $0 --target --upgradable <name>
           $0 --target --install <name> <toolchain> <url>
           $0 --target --remove  <name>
           $0 --target --refresh [--all | <name> [<name>...]]
           $0 --target --update <name>
           $0 --target --sync <name>
           $0 --target --import <name>
           $0 --target --register --user <uname> --password <pass> --all | <tname> [<tname>...]

           $0 --devel --list <target> [<search string>]
           $0 --devel --install <target> <devel package list>
           $0 --devel --remove <target> <devel package list>

           $0 --sdk --version
           $0 --sdk --refresh
           $0 --sdk --upgradable
           $0 --sdk --upgrade
           $0 --sdk --status
           $0 --sdk --register --user <name> --password <pass>

           $0 --refresh-all

           $0 --register-all --user <username> --password <password>

           $0 --version

       This is the Mer SDK VM manager
       For information see https://wiki.merproject.org/wiki/Platform_SDK_on_VirtualBox
       It is primarily intended for use by the SDK web interface.


EOF
    [[ ${1:-} == "--exit" ]] && { exit 1; }
    return 0
}

if [[ $EUID -eq 0 ]]; then
    echo >&2 "WARNING: Invoking $0 as root is deprecated."
    if [[ -n $SUDO_USER ]]; then
        exec sudo -i -u $SUDO_USER $0 "$@"
        echo >&2 "sudo as '$SUDO_USER' failed"
        exit 1
    else
        echo >&2 "Cannot determine Mer SDK user. Invoke $0 as non-root to fix this."
        exit 1
    fi
fi

# From now on, exit if variables not set
set -u

# Make sure normal users can use any dirs we make
umask 022


################################################################'
# toolchain

# Our toolchains are available through zypper as Mer-SB2-* patterns

get_toolchains() {
    zypper --quiet --no-refresh --non-interactive search -t pattern Mer-SB2-* | \
	grep Mer-SB2 | while IFS='| ' read installed pkg dummy; do
	echo "${pkg},${installed}"
    done
    return ${PIPESTATUS[0]}
}

ensure_installed() {
    get_toolchains | egrep -s "^$1,i$" >/dev/null
}

ensure_installable() {
    get_toolchains | egrep -s "^$1,$" >/dev/null
}

install_toolchain() {
    pkg=$1
    if ensure_installable $pkg; then
	sudo zypper --quiet --non-interactive install -t pattern $pkg
	return $?
    else
	echo >&2 "Toolchain $pkg doesn't exist or is already installed- can not install."
	exit 2
    fi
}

remove_toolchain() {
    pkg=$1
    if ensure_installed $pkg; then
	sudo zypper --quiet --no-refresh --non-interactive remove -t pattern $pkg
	return $?
    else
	echo >&2 "Toolchain $pkg is not installed - can not remove."
	exit 2
    fi
}

manage_toolchains() {
    if ! [[ $1 ]]; then
	usage --exit
    fi

    case "$1" in
	--list )
	    get_toolchains
	    return $?
	    ;;
	--install ) shift
	    install_toolchain "$@"
	    return $?
	    ;;
	--remove ) shift
	    remove_toolchain "$@"
	    return $?
	    ;;
	* )
	    echo >&2 "$1 not recognised"
	    usage --exit
	    ;;
    esac
}

################################################################'
# Devel packages

# Our devel packages are available through zypper as -devel packages

assert_target_and_setup() {
    assert_target_name_valid "$target"
    if ! [[ -f $sbox2dir/$target/sb2.config ]]; then
	echo >&2 "Target $target is not a valid Scratchbox2 target"
	exit 1
    fi

    if [[ $(check_target_visible $target) == "no" ]]; then
	echo >&2 "Target $target is not accessible"
	exit 1
    fi
}

t_zypper() {
    (
	sb2 -t $target -m sdk-install -R zypper --quiet "$@"
    )
}

get_develpkgs() {
    search=${1:-}
    # do not include sourcepackages to the list (-t package -t pattern)
    t_zypper --non-interactive --no-refresh search -t package -t pattern -- "$search" 2>&1 | \
	sed '0,/---------/d' | while IFS='| ' read installed pkg dummy; do
	echo "${pkg},${installed}"
    done
    return ${PIPESTATUS[0]}
}

manage_develpkgs() {
    if ! [[ {$1:-} ]]; then
	usage --exit
    fi

    case "$1" in
	--list ) shift
	    target=${1:-}
	    search=${2:-}
	    assert_target_and_setup
	    get_develpkgs $search
	    return $?
	    ;;
	--install ) shift
	    target=${1:-}
	    assert_target_and_setup
	    shift
	    t_zypper --non-interactive --no-refresh install "$@"
	    synchronise_target $target
	    return $?
	    ;;
	--remove ) shift
	    target=${1:-}
	    assert_target_and_setup
	    shift
	    t_zypper --non-interactive --no-refresh remove "$@"
	    synchronise_target $target
	    return $?
	    ;;
	* )
	    echo >&2 "$1 not recognised"
	    usage --exit
	    ;;
    esac
}

################################################################
# Targets

t_register() {
    local domain
    local tgt
    [[ -z ${1:-} ]] && return 0

    tgt=$1
    domain=$(sb2 -t $tgt sdk-register -d)
    if [[ z"$domain" == zjolla ]]; then
	echo >&2 -n "$tgt: "
	sb2 -t $tgt -m sdk-install -R sdk-register -u $reg_username -p $reg_password
    else
	echo >&2 "$tgt: Register not needed (domain: ${domain:-empty})"
    fi
}

check_target_visible() {
    set +u
    local tgt=$1
    . $sbox2dir/$tgt/sb2.config
    if [ ! -d "$SBOX_TARGET_ROOT" ]; then
	echo "no"
	return
    fi
    set -u
    echo "yes"
}

get_targets() {
    echo $(sb2-config -f 2>&1)
}

assert_target_name_valid() {
    if [[ $# -lt 1 ]] || [[ -z $1 ]]; then
      echo >&2 "Target name missing."
      exit 1
    fi

    pat='^[-[:alnum:]_.]*$'
    if [[ $1 ]] && [[ $1 =~ $pat ]] ; then
      return
    fi

    echo >&2 "Target name '$1' is not a valid Scratchbox2 target name."
    exit 1
}

synchronise_target() {
    # This is now a minimal set of files to sync
    if ! [ -d $mer_targets/$1 ]; then
	echo >&2 "No target called $1"
	return
    fi
    echo >&2 "Synchronising target to host"
    # The filter=". -" means to read filters from stdin (the <<EOF)
    rsync -a --no-devices --no-specials \
          --delete --ignore-errors \
	  --prune-empty-dirs  --copy-links \
	  --filter=". -" \
	  $mer_targets/$1/. $host_targets/$1/. <<EOF
# Ensure all dirs are copied (--prune-empty-dirs will clean up)
+ */
# We want this for QtCreator to determine the architecture
+ /usr/lib/libQt*Core.so
# Don't need any other .so files
- *.so
# All the import, include and qt* shares
+ /usr/lib/qt*/imports**
# Qt5 qml imports are here
+ /usr/lib/qt5/qml**
+ /usr/include**
+ /usr/share/qt**
+ /usr/lib/pkgconfig**
+ /usr/share/pkgconfig**
# and nothing else
- *
EOF
    # We need /usr/bin/stopCreatorSegfaulting for Creator's happiness
    mkdir -p $host_targets/$1/usr/bin
    touch $host_targets/$1/usr/bin/stopCreatorSegfaulting
    # For Qt5, QtCreator needs to see this dir or it thinks Qt version is not properly installed
    mkdir -p $host_targets/$1/usr/lib/qt5/bin/

    echo >&2 "Sync completed"
}

import_target() {
    # This could be minimised in the future if sf is not fixed
    # Ignore errors as we sometimes have dangling symlinks and
    # still want to keep clean
    if ! [ -d $host_targets/$1 ]; then
	echo >&2 "No host target called $1"
    fi
    rsync -a --no-devices --no-specials \
          --delete --ignore-errors \
	  $host_targets/$1/ $mer_targets/$1
}

# create a unique device-id for the target
target_uuidgen()
{
    local mytarget=$1

    if [[ -z "$mytarget" ]]; then
	echo >&2 "NOTICE: target_uuidgen: empty target name given"
	return 0
    fi

    echo >&2 "target_uuidgen: generating a unique id for $mytarget target"
    sb2 -t $mytarget -m sdk-install -R rm -f /var/lib/dbus/machine-id
    sb2 -t $mytarget -m sdk-install -R dbus-uuidgen --ensure
}

# add the MerSDK hostname to target's /etc/hosts
amend_target_hosts()
{
    local mytarget=$1
    local myhostname=$(hostname)

    if [[ -z "$mytarget" ]]; then
	echo >&2 "NOTICE: amend_target_hosts: empty target name given"
	return 0
    fi

    sb2 -t $mytarget -m sdk-install -R sed -i "s,\(127.0.0.1.*\),\1 $myhostname," /etc/hosts
}

# handler for failed or canceled target installations
download_cleanup()
{
    # reset the handler
    trap - EXIT

    [[ -f "$orig_downloaded_file" ]] && rm -f "$orig_downloaded_file"
    [[ $target_downloaded -eq 1 ]] && [[ -f "$local_file" ]] && rm -f "$local_file"
    [[ -d "$mer_targets/$target" ]] && rm -rf "$mer_targets/$target"
}

# Download and install a rootfs
install_target() {
    skip_toolchain_check=0
    if [[ "$1" == "--jfdi" ]]; then
	# Sometimes you want to install without checking the toolchain - jfdi
	skip_toolchain_check=1; shift;
    fi
    target=$1
    toolchain=$2
    url=$3 #FIXME: check url validity
    if ! [[ $skip_toolchain_check ]]; then
	echo >&2 "Making sure the right toolchain exists"
	if ! ensure_installed $toolchain; then
	    echo >&2 "Installing required toolchain: $toolchain"
	    install_toolchain $toolchain
	fi
    fi

    # set cleanup handler for downloaded rootstraps
    trap download_cleanup EXIT

    # avoid unbound variable in cleanup in case of a local file
    orig_downloaded_file=

    # make sure the target dir exists
    [[ ! -d $mer_targets ]] && mkdir -p $mer_targets

    local_file=""
    target_downloaded=0

    if [[ $url != file\:\/\/\/* ]] && [[ $url != http\:\/\/* ]] && [[ $url != https\:\/\/* ]]; then
	local_file=$(readlink -f $url)
    elif [[ $url == file\:\/\/\/* ]]; then
	local_file=${url//file\:\/\//}
    else
	pushd $mer_targets >/dev/null
	local_file=$mer_targets/$target.tar.bz2
	orig_downloaded_file=$(echo $url | rev | cut -f 1 -d / | rev)
	local md5file="$orig_downloaded_file.md5sum"
	local download_failed=0

	echo >&2 "Downloading '$orig_downloaded_file'"
	curl "$url" -o "$orig_downloaded_file" 2>&1
	curl_status=$?

	if [ $curl_status -eq 0 ] ; then
            # check if md5sum file exists
	    if curl --output /dev/null --silent --head --fail "$url.md5sum"; then
                # md5sum exists, let's check it
		curl --silent "$url.md5sum" > "$md5file"
		if ! md5sum --status -c "$md5file"; then
		    echo >&2 "ERROR: md5sum check failed for file $orig_downloaded_file!"
		    download_failed=1
		else
		    echo >&2 "INFO: md5sum matches - download ok"
		fi
		rm -f "$md5file"
	    else
		echo >&2 "WARNING: No md5sum file found - can not verify file integrity."
	    fi
	fi

	[[ -f $orig_downloaded_file ]] && mv -f $orig_downloaded_file $local_file

	if [[ $download_failed -ne 0 ]] || [[ $curl_status -ne 0 ]] ||
           [[ ! -f $local_file ]] || [[ $(stat -c %s "$local_file") -lt 10000 ]]; then
	    echo >&2 "Download failed!"
	    rm -f $local_file
	    popd >/dev/null
	    return 3
	fi
	popd >/dev/null
	target_downloaded=1
    fi

    # Virtualbox shared folders don't work too well at the moment
    # Unpack targets to a private area within the VM
    sudo rm -rf $mer_targets/$target
    sudo mkdir -p $mer_targets/$target
    cd $mer_targets/$target

    # only create host_targets dirs if inside the VM
    [[ $INSIDE_VBOX ]] && mkdir -p $host_targets/$target

    echo >&2
    echo >&2 "Unpacking target ..."
    sudo tar xf "$local_file"
    local tar_retcode=$?

    if [[ ! -z $local_file ]]; then
	if [[ $target_downloaded -eq 1 ]]; then
	    rm -f "$local_file"
	fi
    else
	rm -f "$mer_targets/$target.tar.bz2"
    fi

    if [ $tar_retcode -ne 0 ]; then
	if [ "$( df --sync / | tr -s ' ' | tail -n 1 | cut -d ' ' -f 4 )" -lt 10000 ]; then
	    echo >&2 "Not enough disk space to unpack target image"
	else
	    echo >&2 "Could not unpack target image"
	fi
	sudo rm -rf $mer_targets/$target
	return 4
    fi

    # reset the cleanup trap
    trap - EXIT

    sudo chown -R $(id -u):$(id -g) $mer_targets/$target

    if [[ $INSIDE_VBOX ]]; then
	synchronise_target $target
	[ $? -ne 0 ] && echo >&2 "Rsync did not exactly run as intended, expect problems."
    fi

    echo >&2 "Setting up SB2"

    case $toolchain in
	*-arm*)
	    architecture=$(echo $toolchain | tr '-' '\n' | tail -n 1)
	    transparency="-c /usr/bin/qemu-arm-dynamic"
	    compiler="/opt/cross/bin/$architecture-meego-linux-gnueabi-gcc"
	    toolsdir="-t /"
	    ;;
	*-mipsel)
	    transparency="-c /usr/bin/qemu-mipsel-dynamic"
	    compiler="/opt/cross/bin/mipsel-meego-linux-gnu-gcc"
	    toolsdir="-t /"
	    ;;
	*-i486*)
	    transparency=""
	    compiler="/opt/cross/bin/i486-meego-linux-gnu-gcc"
	    toolsdir=""
	    ;;
    esac

    if [[ $INSIDE_CHROOT ]]; then
	getent passwd $(id -u) |sudo tee -a etc/passwd >/dev/null
	getent group $(id -u) |sudo tee -a etc/group >/dev/null
    fi

    sb2-init -L "--sysroot=/" -C "--sysroot=/" $transparency -m sdk-build -n -N $toolsdir $target $compiler

    # make sure the created target gets a unique id
    target_uuidgen $target

    # fix target's /etc/hosts
    amend_target_hosts $target

    assert_target_and_setup

    if [[ $INSIDE_VBOX ]]; then
	echo >&2 "Notifying Qt Creator of new target"
	updateQtCreatorTargets --name $target --target-xml $target_xml
    fi

    echo >&2 "Target $target now setup"
}

remove_target() {
    target=$1
    if [ -d $sbox2dir/$target ]; then
	rm -r $sbox2dir/$target
	sudo rm -rf $mer_targets/$target
	if [[ $INSIDE_VBOX ]]; then
	    rm -rf $host_targets/$target
	    echo >&2 "Notifying Qt Creator of removed target"
	fi
    else
	echo >&2 "Note: target $target was not seen by sb2"
    fi

    if [[ $INSIDE_VBOX ]]; then
        # Notify Qt Creator always when we're in the VM to keep the
        # target information in sync
        updateQtCreatorTargets --delete --name $target --target-xml $target_xml
    fi
}


manage_targets() {
    if ! [[ ${1:-} ]]; then
	usage --exit
    fi

    case "${1:-}" in
	--list )
	    get_targets
	    ;;
	--upgradable ) shift
	    target="${1:-}"
	    assert_target_and_setup
	    t_zypper --non-interactive --no-refresh --quiet list-updates
	    ;;
	--install ) shift
	    assert_target_name_valid "${1:-}"
	    install_target "$@"
	    ;;
	--remove ) shift
	    assert_target_name_valid "${1:-}"
	    remove_target "$@"
	    ;;
	--refresh ) shift
	    if [[ "${1:-}" == "--all" ]]; then
		local targets=$(get_targets)
	    else
		local targets="$@"
	    fi
	    for target in $targets; do
		assert_target_and_setup
		t_zypper --non-interactive refresh
	    done
	    ;;
	--update ) shift
	    target="${1:-}"
	    assert_target_and_setup
	    t_zypper --non-interactive dup
	    ;;
	--sync ) shift
	    target="${1:-}"
	    assert_target_name_valid "$target"
	    synchronise_target "$@"
	    updateQtCreatorTargets --name $target --target-xml $target_xml
	    ;;
	--import ) shift
	    assert_target_name_valid "${1:-}"
	    import_target "$@"
	    ;;
	--register ) shift
	    local alltargets
	    get_register_credentials "$@"
	    shift $reg_shift

	    if [[ "${1:-}" == "--all" ]]; then
		local targets=$(get_targets)
		alltargets=1
		shift
	    else
		local targets="$@"
	    fi

	    # Fail here if --all was not used and no targets were given
	    [[ -z "$targets" ]] && [[ -z "$alltargets" ]] && usage --exit

	    for target in $targets; do
		assert_target_and_setup
		t_register $target
	    done
	    ;;
	* )
	    echo >&2 "$1 not recognised"
	    usage --exit
	    ;;
    esac
}

################################################################
# SDK

get_sdk_version() {
    echo "Version not available"
}

upgrade_sdk() {
    sudo zypper --quiet --non-interactive refresh -f
    sudo zypper --quiet --non-interactive dup
}

refresh_sdk() {
    sudo zypper --quiet --non-interactive refresh -f
}

register_sdk() {
    local domain
    get_register_credentials "$@"
    domain=$(sdk-register -d)
    if [[ z"$domain" == zjolla ]]; then
	echo >&2 -n "MerSDK: "
	sdk-register -u ${reg_username:-} -p ${reg_password:-}
    else
	echo >&2 "MerSDK: Register not needed (domain: ${domain:-empty})"
    fi
}

sdk_status() {
    systemctl --failed
    ERR=$?
    if sudo VBoxControl -nologo sharedfolder list | grep ' home$' > /dev/null 2>&1 ; then
	echo "'home' shared folder is missing"
	ERR=1
    fi
    if sudo VBoxControl -nologo sharedfolder list | grep ' config$' > /dev/null 2>&1 ; then
	echo "'config' shared folder is missing"
	ERR=1
    fi
    if sudo VBoxControl -nologo sharedfolder list | grep ' targets$' > /dev/null 2>&1 ; then
	echo "'targets' shared folder is missing"
	ERR=1
    fi
    exit $ERR
}

manage_sdk() {
    if ! [[ ${1:-} ]]; then
	usage --exit
    fi

    case "$1" in
	--version )
	    get_sdk_version
	    ;;
	--status )
	    sdk_status
	    ;;
	--upgradable ) shift
	    zypper --non-interactive --no-refresh --quiet list-updates
	    ;;
	--upgrade ) shift
	    upgrade_sdk "$@"
	    ;;
	--refresh )
	    refresh_sdk
	    ;;
	--register ) shift
	    # expects --user and --password
	    register_sdk "$@"
	    ;;
	* )
	    echo >&2 "$1 not recognised"
	    usage --exit
	    ;;
    esac
}


################################################################
# utility

get_register_credentials() {
    set +u
    reg_username=
    reg_password=
    reg_shift=0
    while [[ "${1:-}" ]]; do
	case "$1" in
	    --user )
		[ -z "$2" ] && usage --exit
		reg_username="$2"
		(( reg_shift=reg_shift+2 ))
		shift 2
		;;
	    --password )
		[ -z "$2" ] && usage --exit
		reg_password="$2"
		(( reg_shift=reg_shift+2 ))
		shift 2
		;;
	    *)
		break
		;;
	esac
    done
    if [ -z "$reg_username" ] || [ -z "$reg_password" ]; then
	usage --exit
    fi

    set -u
}

################

INSIDE_CHROOT=$([[ -e /etc/mer-sdk-chroot ]] && echo 1)
INSIDE_VBOX=$([[ -e /etc/mer-sdk-vbox ]] && echo 1)

# exactly one must be true
if [[ $INSIDE_CHROOT$INSIDE_VBOX != 1 ]]; then
    echo >&2 "Internal error: Failed to determine type of SDK installation"
    exit 1
fi

mer_targets=/srv/mer/targets
host_targets=/host_targets
sbox2dir=${HOME}/.scratchbox2
target_xml=${host_targets}/targets.xml

################################################################
# Main

if ! [[ ${1:-} ]]; then
    usage --exit
fi

case "$1" in
    --toolchain ) shift
	manage_toolchains "$@"
	;;
    --target ) shift
	manage_targets "$@"
	;;
    --devel ) shift
	manage_develpkgs "$@"
	;;
    --sdk ) shift
	manage_sdk "$@"
	;;
    --refresh-all ) shift
	manage_targets --refresh --all
	manage_sdk --refresh
	;;
    --register-all ) shift
	# expects to get --user and --password too
	manage_sdk --register "$@"
	manage_targets --register "$@" --all
	;;
    --version)
	echo "$0, version VERSION_FROM_SPEC"
	exit 0
	;;
    * )
	echo >&2 "$1 not recognised"
	usage --exit
	;;
esac
