#!/bin/bash
#
# sdk-assitant is a helper script for simple scratchbox2 target tasks
# in MerSDK
#
# Copyright (C) 2014 Jolla Ltd.
# Contact: Juha Kallioinen <juha.kallioinen@jolla.com>
# All rights reserved.
#
# You may use this file under the terms of BSD license as follows:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   * Neither the name of the Jolla Ltd nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

fail() {
    echo "FAIL: $@"
    exit 1
}

# dry run function
_() {
    [[ -n $OPT_DRY_RUN ]] && echo "$@" || eval $@
}

usage() {
    cat <<EOF
SDK assistant script

Usage:
    $(basename $0) create [OPTION] <target-name> <rootstrap>
                            : create a new sb2 target

    $(basename $0) remove <target-name>
                            : remove the given sb2 target

    $(basename $0) list
                            : list available sb2 targets

Options:
    <target-name>           : name of the sb2 target
    <rootstrap>             : a rootstrap tarball URL or a local file
    -a | --arch <arm|i486>  : create a target of the given arch
                              if this option is not given, arch will be guessed
                              from the name of the rootstrap
    -y | --non-interactive  : do not ask questions
    -z | --dry-run          : do nothing, just print out what would happen
    -h | --help             : show this help

EOF

    # exit if any argument is given
    [[ -n "$1" ]] && exit 1
}

guess_target_architecture()
{
    # examples of strings the guesser can handle:
    # 
    # zoobar-latest-Sailfish_SDK_Target-armv7hl.tar.bz2
    # Vendor-1.0.7.16_SDK_Target-i486.tar.bz2
    # foobar-arm.tbz
    # bar-foo-zoidberg-x86.tar.gz

    local rootstrap=$(rev <<< $OPT_ROOTSTRAP | cut -f 1 -d / )
    local arch=$(cut -f 3 -d . <<< $rootstrap | cut -f 1 -d - | rev)

    case "$arch" in
        arm | armv7hl )
            OPT_ARCH="arm"
            ;;
        i486 | *86 )
            OPT_ARCH="i486"
            ;;
        * )
            local arch2=$(cut -f 2 -d . <<< $rootstrap | cut -f 1 -d - | rev)
            case "$arch2" in
                arm | armv7hl )
                    OPT_ARCH="arm"
                    ;;
                i486 | *86 )
                    OPT_ARCH="i486"
                    ;;
                * )
                    fail "unable to guess target architecture from $(rev <<< $rootstrap)"
                    ;;
            esac
            ;;
    esac

    echo "Guessing target architecture [$OPT_ARCH]"
}

# handle commandline options
while [[ ${1:-} ]]; do
    case "$1" in
        -a | --arch ) shift
            OPT_ARCH=$1; shift
            if [[ $OPT_ARCH != "arm" ]] && [[ $OPT_ARCH != "i486" ]]; then
                fail "unsupported architecture given - see: $(basename $0) --help"
            fi
            ;;
        -y | --non-interactive ) shift
            OPT_YES=1
            ;;
        -z | --dry-run ) shift
            OPT_DRY_RUN=1
            ;;
        -h | --help ) shift
            usage quit
            ;;
        create ) shift
            OPT_CREATE=1
            ;;
        remove ) shift
            OPT_REMOVE=1
            OPT_TARGET=$1; shift
            [[ -z $OPT_TARGET ]] && fail "remove: target name required"
            ;;
        list ) shift
            # list requested, just do it
            sb2-config -f
            exit $?
            ;;
        -* )
            fail "unknown option $1"
            ;;
        * )
            OPT_TARGET=$1; shift
            OPT_ROOTSTRAP=$1; shift
            [[ -z $OPT_ROOTSTRAP ]] && fail "create: target name and a rootstrap URL or filename required"
            ;;
    esac
done

if [[ $EUID -eq 0 ]]; then
    fail "$(basename $0) must not be run as root."
fi

# if not list, at least create or remove required
[[ $OPT_CREATE ]] && [[ $OPT_REMOVE ]] && usage quit

# cannot be both create and remove
[[ ! $OPT_CREATE ]] && [[ ! $OPT_REMOVE ]] && usage quit

if [[ $OPT_CREATE ]]; then
    if [[ ! $OPT_TARGET ]] || [[ ! $OPT_ROOTSTRAP ]]; then
        fail "create: target name and rootstrap required"
    fi

    if [[ -z $OPT_ARCH ]]; then
        guess_target_architecture
    fi

    case $OPT_ARCH in
        arm )
            TOOLCHAIN="Mer-SB2-armv7hl"
            ;;
        i486 )
            TOOLCHAIN="Mer-SB2-i486"
            ;;
        * )
            fail "internal error - arch is [$OPT_ARCH]"
            ;;
    esac

    if [[ -z $(zypper pt -i | grep $TOOLCHAIN) ]]; then
        cat <<EOF
FAIL: Toolchain pattern $TOOLCHAIN is not installed.
Please install it by issuing the following command:

sudo zypper in -t pattern $TOOLCHAIN

EOF
        exit 1
    fi

    cat <<EOF
Creating the target [$OPT_TARGET] for arch [$OPT_ARCH]
Using rootstrap [$OPT_ROOTSTRAP]
EOF

fi

if [[ $OPT_REMOVE ]]; then
    echo "Going to remove the target [$OPT_TARGET]"
fi

[[ $OPT_DRY_RUN ]] && echo "[only print out what would be done]"

# confirm
if [[ -z $OPT_YES ]]; then
    while true; do
    read -p "Do you want to continue? (y/n) " answer
    case $answer in
        [Yy]*)
        break ;;
        [Nn]*)
        echo "Ok, exiting"
        exit 0
        ;;
        *)
        echo "Please answer yes or no."
        ;;
    esac
    done
fi

if [[ $OPT_CREATE ]]; then
    _ sdk-manage --use-chroot-as $USER --target --install $OPT_TARGET $TOOLCHAIN $OPT_ROOTSTRAP
    exit $?
fi

if [[ $OPT_REMOVE ]]; then
    _ sdk-manage --use-chroot-as $USER --target --remove $OPT_TARGET
    exit $?
fi


# For Emacs:
# Local Variables:
# indent-tabs-mode:nil
# tab-width:4
# mode: sh
# End:
# For VIM:
# vim:set softtabstop=4 shiftwidth=4 tabstop=4 expandtab:
